name: Build

on:
  pull_request:
    branches: 
        - main 
        - develop
        - release/*
    paths-ignore:
      - .gitignore
      - CODE_OF_CONDUCT.md
      - LICENSE
      - README.md

  workflow_call:
    inputs:
      build-artifacts:
        type: boolean
        required: true
        default: false

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      name: Checkout code

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore solution
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --no-restore --configuration Release

     # Ejecutar las pruebas y generar cobertura con formato OpenCover
    - name: Test solution with coverage
      run: |
        dotnet test ${{ env.SOLUTION_PATH }} --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./TestResults
        reportgenerator -reports:./TestResults/**/coverage.xml -targetdir:"coveragereport" -reporttypes:HtmlInline_AzurePipelines;Coverage
      env:
        SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}

    
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@v3.0.0
      env:
        SONAR_TOKEN: ${{ secrets.SONARCLOUND_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=christianrd_FastCleanArchitecture
          -Dsonar.organization=christianrd
          -Dsonar.cs.opencover.reportPaths=coverage.opencover.xml
          -Dsonar.Tests=tests/
    
    - name: Publish website
      if: ${{ inputs.build-artifacts == true }}
      run: |
        dotnet publish --configuration Release --runtime win-x86 --self-contained --output ./publish
        cd publish
        zip -r ./publish.zip .
      working-directory: ./src/API/

    - name: Upload website artifact (website)
      if: ${{ inputs.build-artifacts == true }}
      uses: actions/upload-artifact@v4
      with:
        name: website
        path: ./src/API/publish/publish.zip
        if-no-files-found: error